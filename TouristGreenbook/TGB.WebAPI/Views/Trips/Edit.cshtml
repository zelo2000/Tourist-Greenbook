@using System.Linq
@model TGB.WebAPI.Models.TripWithPlaces
@*TGB.WebAPI.Models.Trip*@

    @{
        ViewData["Title"] = "Edit";
    }

    <h2>Edit</h2>

    <h4>Trip</h4>
    <hr />
    <div class="row">
        <div class="col-sm-3">
            <form asp-action="Edit">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <input type="hidden" asp-for="@Model.Trips[0].Id" />
                <div class="form-group">
                    <label asp-for="@Model.Trips[0].City" class="control-label"></label>
                    <input asp-for="@Model.Trips[0].City" class="form-control" />
                    <span asp-validation-for="@Model.Trips[0].City" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="@Model.Trips[0].StayTimeStart" class="control-label"></label>
                    <input asp-for="@Model.Trips[0].StayTimeStart" class="form-control" />
                    <span asp-validation-for="@Model.Trips[0].StayTimeStart" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="@Model.Trips[0].StayTimeFinish" class="control-label"></label>
                    <input asp-for="@Model.Trips[0].StayTimeFinish" class="form-control" />
                    <span asp-validation-for="@Model.Trips[0].StayTimeFinish" class="text-danger"></span>
                </div>
                <div class="form-group">
                    <label asp-for="@Model.Trips[0].Budget" class="control-label"></label>
                    <input asp-for="@Model.Trips[0].Budget" class="form-control" />
                    <span asp-validation-for="@Model.Trips[0].Budget" class="text-danger"></span>
                </div>
                <div class="form-group">
                    @*<label asp-for="@Model.Places" class="control-label"></label>
                    @{
                        var places = Model.Places.Where(pl => pl.Trip != null && pl.Trip.Id == Model.Trips[0].Id).ToList();
                        foreach (var place in @Model.Places.Where(pl => pl.Trip != null && pl.Trip.Id == Model.Trips[0].Id))
                        {
                            <p>@place.Name, @place.Address, @place.Type</p>
                        }
                    }
                    <p>@Model.Places.Where(pl => pl.Trip != null && pl.Trip.Id == Model.Trips[0].Id)</p>*@
                    @*<input asp-for="@Model.Places.Where(pl => pl.Trip!=null && pl.Trip.Id == Model.Trips[0].Id)" class="form-control" />*@
                    @*<span asp-validation-for="Places" class="text-danger"></span>*@
                </div>
                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </form>
        </div>
        <div class="col-sm-9">
            <table id="table_places" class="table table-striped table-hover table-condensed">
                <thead>
                <tr>
                    <th>

                    </th>
                    <th onclick="sortTable(0)">
                        @Html.DisplayNameFor(model => model.Places[0].Name)
                    </th>
                    <th onclick="sortTable(1)">
                        @Html.DisplayNameFor(model => model.Places[0].Address)
                    </th>
                    <th onclick="sortTable(2)">
                        @Html.DisplayNameFor(model => model.Places[0].Type)
                    </th>
                    <th onclick="sortTable(3)">
                        @Html.DisplayNameFor(model => model.Places[0].WorkTimeStart)
                    </th>
                    <th onclick="sortTable(4)">
                        @Html.DisplayNameFor(model => model.Places[0].WorkTimeFinish)
                    </th>
                    <th onclick="sortTable(5)">
                        @Html.DisplayNameFor(model => model.Places[0].Rating)
                    </th>
                    <th onclick="sortTable(6)">
                        @Html.DisplayNameFor(model => model.Places[0].Description)
                    </th>
                    
                </tr>
                </thead>
                <tbody>
                @{
                    var places = Model.Places.Where(pl => pl.Trip != null && pl.Trip.Id == Model.Trips[0].Id).ToList();
                    foreach (var place in places)
                    {
                        <tr>
                            <td>
                                <input type="checkbox" name="@place.Id" onclick="changePlaceState(this)" />
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => place.Name)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => place.Address)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => place.Type)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => place.WorkTimeStart)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => place.WorkTimeFinish)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => place.Rating)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => place.Description)
                            </td>
                        </tr>
                    
                    
                    @*<p>@place.Name, @place.Address, @place.Type</p>*@
                    }
                }
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <table class="table table-striped table-hover table-condensed">
            <thead>

            </thead>
        </table>
    </div>


    <div>
        <a asp-action="Index">Back to List</a>
    </div>

    <script>
        function sortTable(n) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("table_places");
            switching = true;
            // Set the sorting direction to ascending:
            dir = "asc";
            /* Make a loop that will continue until
            no switching has been done: */
            while (switching) {
                // Start by saying: no switching is done:
                switching = false;
                rows = table.rows;
                /* Loop through all table rows (except the
                first, which contains table headers): */
                for (i = 1; i < (rows.length - 1); i++) {
                    // Start by saying there should be no switching:
                    shouldSwitch = false;
                    /* Get the two elements you want to compare,
                    one from current row and one from the next: */
                    x = rows[i].getElementsByTagName("TD")[n];
                    y = rows[i + 1].getElementsByTagName("TD")[n];
                    /* Check if the two rows should switch place,
                    based on the direction, asc or desc: */
                    if (dir == "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            // If so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            // If so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    /* If a switch has been marked, make the switch
                    and mark that a switch has been done: */
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    // Each time a switch is done, increase this count by 1:
                    switchcount++;
                } else {
                    /* If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again. */
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }
    </script>


@section Scripts {
        @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    }
