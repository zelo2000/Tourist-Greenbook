@using Microsoft.AspNetCore.Http.Features.Authentication
@model IEnumerable<TGB.WebAPI.Models.Place>
@*Dictionary<string, List<Place>>()*@

@{
    ViewData["Title"] = "Choose needed places";
}

<form action="/Trips/CreateTrip" method="post">
    <div id="select_places">
        <div id="tags">
            <h3><b>Choose places for your future trip</b></h3>
            
            @{
                foreach (var element in ViewBag.TagedPlace)
                {
                    <table id="table_@element.Key" class="table table-striped table-hover table-condensed">
                        <thead style="background-color: antiquewhite">
                            <tr>
                                <th>

                                </th>
                                <th onclick="sortTable(1, 'table_@element.Key')">
                                    @*<a asp-action="SelectPlaces" asp-route-sortOrder="@ViewData["NameSortParam"]">
                                            @Html.DisplayNameFor(model => model.Name)
                                        </a>*@
                                    @Html.DisplayNameFor(model => model.Name)
                                </th>
                                <th onclick="sortTable(2, 'table_@element.Key')">
                                    @Html.DisplayNameFor(model => model.Type)
                                    @*<a asp-action="SelectPlaces" asp-route-sortOrder="@ViewData["TypeSortParam"]">
                                            @Html.DisplayNameFor(model => model.Type)
                                        </a>*@
                                </th>
                                <th onclick="sortTable(3, 'table_@element.Key')">
                                    @Html.DisplayNameFor(model => model.Address)
                                    @*<a asp-action="SelectPlaces" asp-route-sortOrder="@ViewData["AddressSortParam"]">
                                            @Html.DisplayNameFor(model => model.Address)
                                        </a>*@
                                </th>
                                <th onclick="sortTable(4, 'table_@element.Key')">
                                    @Html.DisplayNameFor(model => model.WorkTimeStart)
                                    @*<a asp-action="SelectPlaces" asp-route-sortOrder="@ViewData["WorkTimeStartSortParam"]">
                                            @Html.DisplayNameFor(model => model.WorkTimeStart)
                                        </a>*@
                                </th>
                                <th onclick="sortTable(5, 'table_@element.Key')">
                                    @Html.DisplayNameFor(model => model.WorkTimeFinish)
                                    @*<a asp-action="SelectPlaces" asp-route-sortOrder="@ViewData["WorkTimeFinishSortParam"]">
                                            @Html.DisplayNameFor(model => model.WorkTimeFinish)
                                        </a>*@
                                </th>
                                <th onclick="sortTable(6, 'table_@element.Key')">
                                    @Html.DisplayNameFor(model => model.Rating)
                                    @*<a asp-action="SelectPlaces" asp-route-sortOrder="@ViewData["RatingSortParam"]">
                                            @Html.DisplayNameFor(model => model.Rating)
                                        </a>*@
                                </th>
                                <th onclick="sortTable(7)">
                                    @Html.DisplayNameFor(model => model.Description)
                                </th>
                            </tr>
                        </thead>
                        <tbody style="background-color: azure">
                            @{
                                <tr>
                                    <h3 style="color:mediumblue"><b>@element.Key</b></h3>
                                </tr>
                                {
                                    foreach (var place in Model) //(var place in element.Value)
                                    {
                                        if (place.Type == element.Key)   //displayMarkers(@place.Id);
                                        {
                                            <tr>
                                                <td>
                                                    <input type="checkbox" name="@place.Id" onclick="changePlaceState(this, @place.Id); " />
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => place.Name)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => place.Type)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => place.Address)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => place.WorkTimeStart)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => place.WorkTimeFinish)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => place.Rating)
                                                </td>
                                                <td>
                                                    @Html.DisplayFor(modelItem => place.Description)
                                                    <input type="hidden" name="Lat2" id="lat2" value="@Html.DisplayFor(modelItem => place.Coordinates)">
                                                    <input type="hidden" name="Long2" id="long2" value="@Html.DisplayFor(modelItem => place.Description)">
                                                </td>

                                            </tr>
                                        }


                                    }
                                }
                            }
                        </tbody>
                    </table>
                }
            }

          

        </div>
        @*<input class="btn btn-light" type="submit" value="Create Trip" name="submit" onclick="getCheckedPlaces()" />*@
        <button class="btn btn-light" type="submit" value="Create Trip" name="submit" onclick="getCheckedPlaces();">Create Trip</button> @*CreateTrip*@
        <div id="path">

        </div>
        <div id="info">
            <h3>Information</h3>
            <p id="description"></p>
        </div>
    </div>
    @*<input class="btn btn-light" type="submit" value="Create Trip" name="submit" onclick="getCheckedPlaces()" />*@
</form>















<style>
    #map, #map_canvas {
        width: 1000px;
        height: 1000px;
    }
</style>



<div id="map_canvas"></div>


<style>
    #map_canvas img {
        max-width: none;
    }
</style>


<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>
<br />



<script type="text/javascript">


        var myModel = [];

    @foreach (var place in Model)
    {
    @:myModel.push({
    @:ID: '@place.Id',
    @:Name: '@place.Name',
    @:Lat:  '@place.Latitude',
    @:Long: '@place.Longtitude',
    @:});
    }
    var markers = [];
    function initMap() {

        google.maps.visualRefresh = true;
        var Lviv = new google.maps.LatLng(49.8382600, 24.0232400);

        var mapOptions = {
            zoom: 15,
            center: Lviv,
            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
        };
     //myModel.ID
        var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

        $.each(myModel, function (i, item) {
            var marker = new google.maps.Marker({
                'position': new google.maps.LatLng(item.Lat, item.Long),
                'map': map,
                'title': item.Name,
                'id': item.ID,
                visible: false
            });
            markers.push(marker);

            

            var infowindow = new google.maps.InfoWindow({
                content: "<div class='infoDiv'><h2>" + item.Name + "</div></div>"
            });

            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });

        })
    }
   

</script>



<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB7tnGRfh4zut21AaOKJpBEGIh7UXJobVM&callback=initMap">
</script>




























<script type="text/javascript">
    function changePlaceState(paramName, placeId) {
        //console.log(paramName.checked);
        if ((paramName.checked == true)) {
            // ToDo show on GoogleMaps
            var chB = paramName;

            for (i = 0; i < markers.length; i++) {
                if (markers[i].id == placeId) {

                    markers[i].setVisible(true);
                }
                
            }


            
        } else {

            // ToDo get out from google maps
            //workWithMarker(myModel[paramName.id])
            var chB = paramName;
            for (i = 0; i < markers.length; i++) {
                if (markers[i].id == placeId) {

                    markers[i].setVisible(false);
                }

            }
           
        }
    }
</script>

<script type="text/javascript">
    function getCheckedPlaces() {
        var checkedB = document.querySelectorAll("input[type=checkbox]:checked");
        //console.log(checkedB.checked);
        var chB = '';

        for (var i = 0; i < checkedB.length; i++) {
            chB += checkedB[i].name;
            if (i < checkedB.length - 1) {
                chB += '*';
            }
        }

        var tripS = '';
        tripS += sessionStorage.getItem('City').toString();
        tripS += '|' + sessionStorage.getItem('StartDate').toString();
        tripS += '|' + sessionStorage.getItem('StartTime').toString();
        tripS += '|' + sessionStorage.getItem('FinishDate').toString();
        tripS += '|' + sessionStorage.getItem('FinishTime').toString();;
        tripS += '|' + sessionStorage.getItem('Budget').toString();
        var t = { trip: tripS };
        var r = { ids: chB, trip: tripS };
        Create(r);

        //$("div").text(checkedB.length);
    }
    function Create(filters) {

        $.ajax({
            url: '/Trips/CreateTrip',
            type: 'POST',
            cache: false,
            async: false,
            dataType: "html",
            data: filters
        })
            .done(function (result) {
                alert('success');
                $('body').html(result);

            }).fail(function (xhr) {
                console.log('error : ' + xhr.status + ' - ' + xhr.statusText + ' - ' + xhr.responseText);
            });
    }

    function sortTable(n, tableId) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById(tableId);
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
        no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /* Loop through all table rows (except the
            first, which contains table headers and 2nd - name of group): */
            for (i = 2; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
                based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>
<script type="text/javascript">
    function CreatePath() {

    }
</script>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

@*@model System.Collections.Generic.List<TGB.WebAPI.Models.Place>

    <!DOCTYPE html>

    <html>
    <head>
        <title>title</title>
    </head>
    <body>
    <div>

    </div>
    </body>
    </html>*@

