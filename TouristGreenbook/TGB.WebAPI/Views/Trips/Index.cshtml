@model TripWithPlaces
@*IEnumerable<TGB.WebAPI.Models.Trip>*@
@*TripWithPlaces*@

@{
    ViewData["Title"] = "Index";
}

<h2>Index</h2>

<p>
    <a asp-action="Create">Create New</a>
</p>
<table id="table_trips" class="table table-striped table-hover table-condensed">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["CitySortParm"]">@Html.DisplayNameFor(model => model.Trips[0].City)</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["StayTimeStartSortParm"]">@Html.DisplayNameFor(model => model.Trips[0].StayTimeStart)</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["StayTimeFinishSortParm"]">@Html.DisplayNameFor(model => model.Trips[0].StayTimeFinish)</a>
            </th>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["BudgetSortParm"]">@Html.DisplayNameFor(model => model.Trips[0].Budget)</a>
            </th>
            <th onclick="sortTable(4)">
                @Html.DisplayNameFor(model => model.Trips.ElementAt(0).Places)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var trip in Model.Trips)
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => trip.City)
            </td>
            <td>
                @Html.DisplayFor(modelItem => trip.StayTimeStart)
            </td>
            <td>
                @Html.DisplayFor(modelItem => trip.StayTimeFinish)
            </td>
            <td>
                @Html.DisplayFor(modelItem => trip.Budget)
            </td>
            <td>
                @Html.DisplayFor(modelItem => Model.Places.Where(pl => pl.Trip != null && pl.Trip.Id == trip.Id).ToList().Count)  @*item.Places.Count*@
            </td>
            <td>
                @{
                    var trp = new TripWithPlaces()
                    {
                        Trips = new List<Trip>() { trip},
                        Places = new List<Place>()

                    };
                    trp.Places.AddRange(Model.Places.Where(pl => pl.Trip!=null && pl.Trip.Id == trip.Id));
                }
                <a asp-action="Edit" asp-route-id="@trip.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@trip.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@trip.Id">Delete</a>
            </td>
        </tr>
        }
    </tbody>
</table>

<script>
    function sortTable(n) {
        var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
        table = document.getElementById("table_trips");
        switching = true;
        // Set the sorting direction to ascending:
        dir = "asc";
        /* Make a loop that will continue until
        no switching has been done: */
        while (switching) {
            // Start by saying: no switching is done:
            switching = false;
            rows = table.rows;
            /* Loop through all table rows (except the
            first, which contains table headers): */
            for (i = 1; i < (rows.length - 1); i++) {
                // Start by saying there should be no switching:
                shouldSwitch = false;
                /* Get the two elements you want to compare,
                one from current row and one from the next: */
                x = rows[i].getElementsByTagName("TD")[n];
                y = rows[i + 1].getElementsByTagName("TD")[n];
                /* Check if the two rows should switch place,
                based on the direction, asc or desc: */
                if (dir == "asc") {
                    if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                } else if (dir == "desc") {
                    if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                        // If so, mark as a switch and break the loop:
                        shouldSwitch = true;
                        break;
                    }
                }
            }
            if (shouldSwitch) {
                /* If a switch has been marked, make the switch
                and mark that a switch has been done: */
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
                // Each time a switch is done, increase this count by 1:
                switchcount++;
            } else {
                /* If no switching has been done AND the direction is "asc",
                set the direction to "desc" and run the while loop again. */
                if (switchcount == 0 && dir == "asc") {
                    dir = "desc";
                    switching = true;
                }
            }
        }
    }
</script>